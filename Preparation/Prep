Day 1:

1. Find the duplicate:  Start the question by using sorting and find duplicate by iterationg over array. TC: O(nlogn), SC: O(n/1)
                        Second we could go for "set" approach and find the duplicate. TC: O(n), SC: O(n).
                        Last and optimised approach use "Floyd Tortoise Hare Algo" for cycle detection. TC: O(n), SC: O(1).


2.Sort an array of 0’s 1’s 2’s without using extra space or sorting algo:
                    -> Start by sorting the array. TC:O(nlogn), SC:O(1).
                    -> Use count sort and then iterate to fill the values. TC:O(n)+O(n)= O(2n)=O(n), SC:O(1).
                    -> Use Dutch National Flag Algo. Most efficient and does work well. TC: O(n), SC:O(1). Does work in single pass.


3.Find the repeating and the missing:

                    -> Using Sorting.
                    -> Use count array.
                    ->Sum Method. Find sum of all numbers and make eqn as S-x+y , where S: sum of all numbers, x:missing number, y:duplicate number.
                    -> Using XOR. It includes several steps they are:
                        1.XOR all a[i]= x
                        2.x^(1^2^...^n)
                        3.x^y = num
                        4.Separate in 2 buckets.
                        5.Separate (1..n) in 2 basket.
                        6.XOR both basket to find number.

4. Merge two sorted arrays in O(1) space



5.Maximum Subarray Sum:
                    -> Use iteration for 3 times it will give O(n^3) complexity.
                    -> We can reduce one loop to get n^2 complexity.
                    -> We can further optimie it by using Kadane's Algo to get it to O(n).

6. Merge Intervals:
                    ->Sort and compare the intervals.


 Day 2:

7. Set Zeroes:
            -> First we will try to apply brute force by iterating over 2d array and setting all values in the respective column or row as any value such as -1 or infinity. Then replcae all those values with 0.
            -> Other approach is to take two array and store the index of all rows and columns if zero found set the value in row and col array as 0.
            -> Most optimal approach would be to instead of taking two other array we could store it in first row and first column thus reducing space complexity.



8.Pascal Triangle : -> Easy just start by filling first column and last column iteratively with 1 and for remaining fill with sum of the cell above it and the cell left of its upper cell.


9. Next Permutation: 1.Find the largest index k such that nums[k] < nums[k + 1]. If no such index exists, just reverse nums and done.
                      2.Find the largest index l > k such that nums[k] < nums[l].
                      3.Swap nums[k] and nums[l].
                      4.Reverse the sub-array nums[k + 1:].

10. Inversion of Array (Using Merge Sort) : -> Use merge sort and invert the array accordingly.

11.Stock Buy and Sell : -> Implement the solution using simple DP approach.
                        -> Now optimize the space further by converting the DP table into variables to store values.

12.Rotate Matrix : -> It can be done by reversing the matrix and then find the transpose of same or vice versa.

Day 3:

13. Search in 2D matrix: -> One solution is simple in O(n^2) iteration traverse through entire matrix.
                         -> Since our matrix is sorted we can optimize it further.
                         -> We can use Binary search in this which is very imp technique to reduce tc.

14. Pow(X,n) : One simple method is to use pow() funtion.
              -> But the efficient one would be to go recursively and use divide and conquer to
              divide the value of n into halves each time and find the solution.


15/16. Majority Element: -> try using going for two pass.
                  -> Now try using hashmap and check count greater than n/2 or n/3 as per requirement.
                  -> The most efficient way is to use Boyre Moore's Voting Algorithm.


17.Grid Uique Path: -> Try using the solution with DP;
                 -> We can now optimize the space in DP by using two vector instead of 2D matrix.
                 -> Further we can optimize space by storing the values in variables.
                 -> One other efficient method is using Combination formulae and deducing number of unique paths by the formulae.

18. Reverse Pairs (Leetcode) : Hard need to redo and learn in a clearer way.

Day 4:

19. 2 Sum: -> Use brute force approach to iterate over an array and find the solution in O(n^2) complexity.
           -> To optimize the approach further we can use a hash table and find the solution as per hashtable.


20. 4 Sum: -> First step is to sort the array and after that we use approach as:
              Sort + TwoPointer + Searching via 2 Sum approach in remaining array.
              Here we need to check carefully for duplicate values, so we just need to pass through them carefully.


21. Longest Consecutive Sequence : -> Firstly we could go for brute force approach it will take n^3 tc.
                                   -> Second method is to go for sorting and then iterate in order to get the sequence it will take nlogn+n time so tc:nlogn
                                   -> The most optimal solution would be to use Bud Optimization and find the solution in O(n). The process is as follows:
                                     1. Use a hash map to store boundary information of consecutive sequence for each element;
                                      there are 4 cases when a new element i reached:

                                      neither i+1 nor i-1 has been seen: m[i]=1;
                                      both i+1 and i-1 have been seen: extend m[i+m[i+1]] and m[i-m[i-1]] to each other;
                                      only i+1 has been seen: extend m[i+m[i+1]] and m[i] to each other;
                                      only i-1 has been seen: extend m[i-m[i-1]] and m[i] to each other.

22. Longest Subarray with 0 sum: -> Start with brute force to search the entire array it will take n^2 time.
                                 -> We can use hash map and try to check at each step if sum is already present, if so calculate the diff bw the indexes.
                                 -> Hash Table method will give us TC as O(n).


23.Count number of subarrays with given XOR: -> First approach is to go brute force over the entire array two nested loops and find the xor for every elements. It will take n^2 tc.
                                             -> The other optimized approach moves as:
                                             1) Initialize ans as 0.
                                             2) Compute xorArr, the prefix xor-sum array.
                                             3) Create a map mp in which we store count of
                                                all prefixes with XOR as a particular value.
                                             4) Traverse xorArr and for each element in xorArr
                                                (A) If m^xorArr[i] XOR exists in map, then
                                                    there is another previous prefix with
                                                    same XOR, i.e., there is a subarray ending
                                                    at i with XOR equal to m. We add count of
                                                    all such subarrays to result.
                                                (B) If xorArr[i] is equal to m, increment ans by 1.
                                                (C) Increment count of elements having XOR-sum
                                                    xorArr[i] in map by 1.
                                             5) Return ans.

24.Longest substring without repeat:  -> Start with Brute force and check for each and every combination. It will take n^3.
                                      -> We can use sliding window concept by using two pointer.
                                      -> Further we can optimize sliding window concept.
                                      -> Next we will use the hasmap or vector of length 256 indicating the values corresponding to char at string s.
                                      -> In this case we will initialize the index of char at the vector eg: t[s[i]]=i, where s is string and t is vector.




Day5: (LinkedList)

25.Reverse a LinkedList : Try both iterative and recursive approach for the same.
                          -> A slight and much more advanced variation is to reverse LL from a specific point in the list, which can be done as:
                             Use iterative approach and use pointers to store the starting and end points of the portion of lsit to be reversed.
                             There is a beautiful concept to do this problem discussed in the code section. Try to make diagram and learn accordingly.



26. Find middle of LinkedList : Simple use two pointer slow ans fast and iterate fast as fast->next->next and slow as slow-> next.
                                When fast will reach end the slow will reach at middle.


27. Merge two sorted Linked List : -> Use two pointer approach while iterating over both the list.
                                   -> The smaller value will simply point towards the bigger one and thus we will make a combined list using this method.


28. Remove N-th node from back of LinkedList : -> First start with brute force while going till end and caluaulating the number of nodes in LL. After that we can just go to the nth node and delete it.
                                              -> A much more optimized approach will be using two pointers fast and slow. First move fast till the n+1 value and diff bw fast and slow will be n. Now we will move till fast reaches end, in this way we can reach towards the one less to the nth from back node.
                                                Now we can remove the nth node and all this is done in one single pass.

29. Delete a given Node when a node is given. (0(1) solution) : Simply swap the values with the number which is next to it and in the end just delete the pointer to free memory.

30. Add two numbers as LinkedList  : Simply use combination of maths by storing a count bit and adding when count >10.
                                     Easily iterate over the both list while checking for the value and storing them in new LL by summing them;







